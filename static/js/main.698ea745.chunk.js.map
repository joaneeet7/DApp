{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mint","color","console","log","state","contract","methods","send","from","account","once","receipt","setState","colors","concat","toConsumableArray","totalSupply","loadWeb3","loadBlockchainData","window","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","networkData","Color","networks","abi","address","Contract","i","_this2","react_default","a","createElement","className","href","target","rel","id","role","onSubmit","event","preventDefault","value","type","placeholder","ref","input","map","key","style","backgroundColor","Component","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.698ea745.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Web3 from 'web3'\nimport Color from '../abis/Color.json'\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if(window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n\n    else {\n      window.alert('¡Considera usar Metamask!')\n    }\n\n  }\n\n  async loadBlockchainData(){\n    const web3 = window.web3\n    // Cargar una cuenta\n    const accounts = await web3.eth.getAccounts()\n    this.setState({account: accounts[0]})\n    const networkId = '5777'\n    const networkData = Color.networks[networkId]\n    if(networkData) {\n      const abi = Color.abi \n      const address = networkData.address\n      const contract = new web3.eth.Contract(abi, address)\n      this.setState({contract})\n      // Función 'totalSupply' del Smart Contract\n      const totalSupply = await contract.methods.totalSupply().call()\n      this.setState({totalSupply})\n      // Carga de colores\n      for (var i = 1; i<=totalSupply; i++){\n        const color = await contract.methods.colors(i-1).call()\n        this.setState({colors: [...this.state.colors, color] \n        })\n      }\n    } else {\n      window.alert('¡Smart Contract no desplegado en la red!')\n    }\n  }\n\n  // Constructor\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 0,\n      colors: []\n    }\n  }\n\n  // Función para un nuevo Color como NFT\n  mint = (color) => {\n    console.log('¡Nuevo NFT en procedimiento!')\n    this.state.contract.methods.mint(color).send({ from: this.state.account })\n    .once('receipt', (receipt) => {\n      this.setState({\n        colors: [...this.state.colors, color]\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"https://frogames.es/rutas-de-aprendizaje\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            DApp\n          </a>\n\n          <ul className=\"navbar-nav px-3\">\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n              <small className=\"text-white\">\n                <span id=\"account\">{this.state.account}</span>   \n              </small>\n            </li>\n          </ul>\n        </nav>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n\n                <h1> DApp de un coleccionable de NFT's</h1>\n                <form onSubmit={(event) => {\n                  event.preventDefault()\n                  const color = this.color.value\n                  this.mint(color)\n                }}>\n\n                <input \n                type = 'text'\n                className = 'form-control mb-1'\n                placeholder = 'Ej: #FFFFFF'\n                ref = {(input) => {this.color = input}}\n                />\n\n                <input \n                type = 'submit'\n                className=\"btn btn-block btn-success\"\n                value = \"NUEVO NFT\"\n                />\n                </form>\n              </div>\n            </main>\n          </div>\n          <hr/>\n          <div className=\"row text-center\">\n            {this.state.colors.map((color,key) => {\n              return (\n                <div key={key} className=\"col-md-3 mb-3\">\n                <div className=\"token\" \n                style={{ backgroundColor: color }}></div>\n                      <div>{color}</div>\n                   </div>\n                )\n            })}\n            </div>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}